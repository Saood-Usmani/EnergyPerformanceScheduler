// Round Robin
// Scheduler.cpp
// CloudSim

#include "Scheduler.hpp"
#include <unordered_map>
#include <climits>

// Static variables
static bool migrating = false;
static unsigned active_machines = 16; 
static size_t rr_pointer = 0; // Pointer for Round Robin scheduling

// Machine groups by CPU type
unordered_map<CPUType_t, vector<MachineId_t>> machine_groups;

// Helper function to find or create a VM
VMId_t Scheduler::FindOrCreateVM(MachineId_t machine_id, VMType_t vm_type, CPUType_t cpu_type) {
    // Check for existing compatible VM
    for (VMId_t vm : vms) {
        VMInfo_t vm_info = VM_GetInfo(vm);
        if (vm_info.machine_id == machine_id && vm_info.vm_type == vm_type) {
            return vm;
        }
    }
    // Create a new VM if none exist
    VMId_t new_vm = VM_Create(vm_type, cpu_type);
    VM_Attach(new_vm, machine_id);
    return new_vm;
}

VMType_t Scheduler::GetDefaultVMForCPU(CPUType_t cpu_type) {
    switch (cpu_type) {
        case X86:
            return LINUX;
        case POWER:
            return AIX;
        case ARM:
            return WIN;
        default:
            SimOutput("Scheduler::GetDefaultVMForCPU(): Unknown CPU type " + to_string(cpu_type), 1);
            return VMType_t(-1); // Fallback VM type
    }
}

// Scheduler initialization
void Scheduler::Init() {
    SimOutput("Scheduler::Init(): Initializing scheduler with Round Robin", 1);
    
    unsigned total_machines = Machine_GetTotal();
    SimOutput("Scheduler::Init(): Total number of machines is " + to_string(total_machines), 3);

    // Group machines by CPU type
    for (unsigned i = 0; i < total_machines; i++) {
        MachineInfo_t machine_info = Machine_GetInfo(MachineId_t(i));
        machine_groups[machine_info.cpu].push_back(MachineId_t(i));
    }

    // Initialize a minimum number of active machines
    for (auto &[cpu_type, machines] : machine_groups) {
        unsigned init_vms = std::min((unsigned)machines.size(), active_machines / (unsigned)machine_groups.size());
        for (unsigned i = 0; i < init_vms; i++) {
            MachineId_t machine_id = machines[i];
            VMType_t default_vm_type = GetDefaultVMForCPU(cpu_type);
            VMId_t vm_id = VM_Create(default_vm_type, cpu_type);
            VM_Attach(vm_id, machine_id);
            vms.push_back(vm_id);
            Machine_SetState(machine_id, S0); // Activate machine
        }
    }
    SimOutput("Scheduler::Init(): Initialization complete", 1);
}

// Handle new task
void Scheduler::NewTask(Time_t now, TaskId_t task_id) {
    TaskInfo_t task_info = GetTaskInfo(task_id);

    SimOutput("Scheduler::NewTask(): Handling new task " + to_string(task_id), 3);

    // Round Robin assignment
    unsigned total_machines = Machine_GetTotal();
    for (unsigned i = 0; i < total_machines; i++) {
        size_t index = (rr_pointer + i) % total_machines;
        MachineId_t machine_id = MachineId_t(index);
        MachineInfo_t machine_info = Machine_GetInfo(machine_id);

        if (machine_info.s_state == S0 && // Machine is active
            machine_info.cpu == task_info.required_cpu && // CPU type matches
            machine_info.memory_used + task_info.required_memory <= machine_info.memory_size) { // Memory fits
            
            // Check if a VM can be created/used on this machine
            VMId_t vm_id = FindOrCreateVM(machine_id, task_info.required_vm, task_info.required_cpu);
            if (vm_id != VMId_t(-1)) {
                VM_AddTask(vm_id, task_id, task_info.priority);
                SimOutput("Scheduler::NewTask(): Assigned task " + to_string(task_id) + 
                          " to VM " + to_string(vm_id), 2);
                rr_pointer = (index + 1) % total_machines; // Update round-robin pointer
                return;
            }
        }
    }

    for (unsigned i = 0; i < total_machines; i++) {
        size_t index = (rr_pointer + i) % total_machines;
        MachineId_t machine_id = MachineId_t(index);
        MachineInfo_t machine_info = Machine_GetInfo(machine_id);

        // Activate an inactive machine
        if (machine_info.s_state == S5 && machine_info.cpu == task_info.required_cpu) {
            Machine_SetState(machine_id, S0); // Wake up machine
            VMId_t vm_id = VM_Create(task_info.required_vm, task_info.required_cpu);
            VM_Attach(vm_id, machine_id);
            VM_AddTask(vm_id, task_id, task_info.priority);

            vms.push_back(vm_id);
            machines.push_back(machine_id);
            SimOutput("Scheduler::NewTask(): Activated machine " + to_string(machine_id) + 
                      " and assigned task " + to_string(task_id), 2);
            rr_pointer = (index + 1) % total_machines; // Update round-robin pointer
            return;
        }
    }

    // If no machine could be activated, log an error
    SimOutput("Scheduler::NewTask(): Unable to assign task " + to_string(task_id), 1);
}




void Scheduler::MigrationComplete(Time_t time, VMId_t vm_id) {
    // Update your data structure. The VM now can receive new tasks
}

void Scheduler::PeriodicCheck(Time_t now) {
    SimOutput("Scheduler::PeriodicCheck(): Performing consolidation check", 3);
    
    // for (unsigned i = 0; i < machines.size(); i++) {
    //     MachineId_t machine_id = machines[i];
    //     MachineInfo_t machine_info = Machine_GetInfo(machine_id);
        
    //     // If machine is idle and has no active VMs or tasks, deactivate it
    //     if (machine_info.active_tasks == 0 && machine_info.active_vms == 0 && machine_info.s_state == S0) {
    //         Machine_SetState(machine_id, S5);
    //         SimOutput("Scheduler::PeriodicCheck(): Deactivated machine " + to_string(machine_id), 2);
    //     }
    // }
}
void Scheduler::Shutdown(Time_t time) {
    // Do your final reporting and bookkeeping here.
    // Report about the total energy consumed
    // Report about the SLA compliance
    // Shutdown everything to be tidy :-)
    for(auto & vm: vms) {
        VM_Shutdown(vm);
    }
    SimOutput("SimulationComplete(): Finished!", 4);
    SimOutput("SimulationComplete(): Time is " + to_string(time), 4);
}

void Scheduler::TaskComplete(Time_t now, TaskId_t task_id) {
    // Do any bookkeeping necessary for the data structures
    // Decide if a machine is to be turned off, slowed down, or VMs to be migrated according to your policy
    // This is an opportunity to make any adjustments to optimize performance/energy
    SimOutput("Scheduler::TaskComplete(): Task " + to_string(task_id) + " is complete at " + to_string(now), 4);
}

// Public interface below

static Scheduler Scheduler;

void InitScheduler() {
    SimOutput("InitScheduler(): Initializing scheduler", 4);
    Scheduler.Init();
}

void HandleNewTask(Time_t time, TaskId_t task_id) {
    SimOutput("HandleNewTask(): Received new task " + to_string(task_id) + " at time " + to_string(time), 4);
    Scheduler.NewTask(time, task_id);
}

void HandleTaskCompletion(Time_t time, TaskId_t task_id) {
    SimOutput("HandleTaskCompletion(): Task " + to_string(task_id) + " completed at time " + to_string(time), 4);
    Scheduler.TaskComplete(time, task_id);
}

void MemoryWarning(Time_t time, MachineId_t machine_id) {
    // The simulator is alerting you that machine identified by machine_id is overcommitted
    SimOutput("MemoryWarning(): Overflow at " + to_string(machine_id) + " was detected at time " + to_string(time), 0);
}

void MigrationDone(Time_t time, VMId_t vm_id) {
    // The function is called on to alert you that migration is complete
    SimOutput("MigrationDone(): Migration of VM " + to_string(vm_id) + " was completed at time " + to_string(time), 4);
    Scheduler.MigrationComplete(time, vm_id);
    migrating = false;
}

void SchedulerCheck(Time_t time) {
    // This function is called periodically by the simulator, no specific event
    SimOutput("SchedulerCheck(): SchedulerCheck() called at " + to_string(time), 4);
    Scheduler.PeriodicCheck(time);
}

void SimulationComplete(Time_t time) {
    // This function is called before the simulation terminates Add whatever you feel like.
    cout << "SLA violation report" << endl;
    cout << "SLA0: " << GetSLAReport(SLA0) << "%" << endl;
    cout << "SLA1: " << GetSLAReport(SLA1) << "%" << endl;
    cout << "SLA2: " << GetSLAReport(SLA2) << "%" << endl;     // SLA3 do not have SLA violation issues
    cout << "Total Energy " << Machine_GetClusterEnergy() << "KW-Hour" << endl;
    cout << "Simulation run finished in " << double(time)/1000000 << " seconds" << endl;
    SimOutput("SimulationComplete(): Simulation finished at time " + to_string(time), 4);
    
    Scheduler.Shutdown(time);
}

void SLAWarning(Time_t time, TaskId_t task_id) {
    
}

void StateChangeComplete(Time_t time, MachineId_t machine_id) {
    // Called in response to an earlier request to change the state of a machine
    SimOutput("StateChangeComplete(): State change for machine " + to_string(machine_id) + " completed at time " + to_string(time), 2);
}

