// Basic implementation algorithm
//  Scheduler.cpp
//  CloudSim

#include "Scheduler.hpp"
#include <unordered_map>
#include <climits>


VMType_t Scheduler::GetDefaultVMForCPU(CPUType_t cpu_type) {
    switch (cpu_type) {
        case X86:
            return LINUX;
        case POWER:
            return AIX;
        case ARM:
            return WIN;
        default:
            SimOutput("Scheduler::GetDefaultVMForCPU(): Unknown CPU type " + to_string(cpu_type), 1);
            return VMType_t(-1); // Fallback VM type
    }
}
void Scheduler::Init() {
    SimOutput("Scheduler::Init(): Initializing scheduler with machine groups for heterogeneity", 1);
    
    unsigned total_machines = Machine_GetTotal();
    SimOutput("Scheduler::Init(): Total number of machines is " + to_string(total_machines), 3);

    // 1: Organize machines into groups based on their attributes
    unordered_map<CPUType_t, vector<MachineId_t>> machine_groups;

    for (unsigned i = 0; i < total_machines; i++) {
        MachineInfo_t machine_info = Machine_GetInfo(MachineId_t(i));
        machine_groups[machine_info.cpu].push_back(MachineId_t(i));
    }

    SimOutput("Scheduler::Init(): Machine groups created for each CPU type", 3);

    // 2: Initialize minimum required VMs for each group
    for (auto &group : machine_groups) {
        CPUType_t cpu_type = group.first;
        vector<MachineId_t> &machines = group.second;

        unsigned init_vms = machines.size();
        for (unsigned i = 0; i < init_vms; i++) {
            MachineId_t machine_id = machines[i];
            Machine_SetState(machine_id, S0);

            // Create a default VM type for this CPU type
            VMType_t default_vm_type = GetDefaultVMForCPU(cpu_type); // Helper function
            VMId_t new_vm = VM_Create(default_vm_type, cpu_type);
            VM_Attach(new_vm, machine_id);

            vms.push_back(new_vm);
            this->machines.push_back(machine_id);
        }
    }

    SimOutput("Scheduler::Init(): Initialization complete with machine groups", 1);
}

void Scheduler::NewTask(Time_t now, TaskId_t task_id) {
    TaskInfo_t task_info = GetTaskInfo(task_id);

    SimOutput("Scheduler::NewTask(): Handling new task " + to_string(task_id), 3);

    // 1: Check existing VMs on active machines
    bool task_assigned = false;
    VMId_t best_vm = VMId_t(-1); //maybe change later
    unsigned min_tasks = UINT_MAX;

    for (VMId_t vm : vms) {
        VMInfo_t vm_info = VM_GetInfo(vm);
        MachineInfo_t machine_info = Machine_GetInfo(vm_info.machine_id);

        if (machine_info.s_state == S0 &&                     // Machine is active
            machine_info.cpu == task_info.required_cpu &&     // CPU type matches
            vm_info.vm_type == task_info.required_vm &&       // VM type matches
            machine_info.memory_used + task_info.required_memory <= machine_info.memory_size && // Memory fits
            vm_info.active_tasks.size() < min_tasks) {        // Least-loaded VM
            best_vm = vm;
            min_tasks = vm_info.active_tasks.size();
        }
    }

    if (best_vm != VMId_t(-1)) {
        VM_AddTask(best_vm, task_id, task_info.priority);
        SimOutput("Scheduler::NewTask(): Task " + to_string(task_id) +
                  " assigned to VM " + to_string(best_vm), 2);
        return;
    }

    // 2: Add a new VM to an already active machine
    for (unsigned i = 0; i < machines.size(); i++) {
        MachineId_t machine_id = machines[i];
        MachineInfo_t machine_info = Machine_GetInfo(machine_id);

        if (machine_info.s_state == S0 &&                     // Machine is active
            machine_info.cpu == task_info.required_cpu &&     // CPU type matches
            machine_info.memory_used + task_info.required_memory + 8 <= machine_info.memory_size) { // Memory fits
            VMId_t new_vm = VM_Create(task_info.required_vm, task_info.required_cpu);
            VM_Attach(new_vm, machine_id);
            VM_AddTask(new_vm, task_id, task_info.priority);

            vms.push_back(new_vm);

            SimOutput("Scheduler::NewTask(): Added new VM " + to_string(new_vm) +
                      " to active machine " + to_string(machine_id) + " for task " + to_string(task_id), 2);
            return;
        }
    }

    // 3: Activate a new machine and create a VM
    for (unsigned i = 0; i < Machine_GetTotal(); i++) {
        MachineId_t machine_id = MachineId_t(i);
        MachineInfo_t machine_info = Machine_GetInfo(machine_id);

        if (machine_info.s_state == S5 &&                     // Machine is inactive
            machine_info.cpu == task_info.required_cpu) {     // CPU type matches
                                                            // add in memory check 

            Machine_SetState(machine_id, S0); // Activate machine

            VMId_t new_vm = VM_Create(task_info.required_vm, task_info.required_cpu);
            VM_Attach(new_vm, machine_id);
            VM_AddTask(new_vm, task_id, task_info.priority);

            vms.push_back(new_vm);
            machines.push_back(machine_id);

            SimOutput("Scheduler::NewTask(): Activated machine " + to_string(machine_id) +
                      " and created VM " + to_string(new_vm) + " for task " + to_string(task_id), 2);
            return;
        }
    }

    // If no machine could be activated, log an error
    SimOutput("Scheduler::NewTask(): Unable to assign task " + to_string(task_id) +
              " due to compatibility issues", 1);
}




void Scheduler::PeriodicCheck(Time_t now) {
    SimOutput("Scheduler::PeriodicCheck(): Performing consolidation check", 3);
    
    for (unsigned i = 0; i < machines.size(); i++) {
        MachineId_t machine_id = machines[i];
        MachineInfo_t machine_info = Machine_GetInfo(machine_id);
        
        // If machine is idle and has no active VMs or tasks, deactivate it
        if (machine_info.active_tasks == 0 && machine_info.active_vms == 0 && machine_info.s_state == S0) {
            Machine_SetState(machine_id, S5);
            //probably remove machine from active machines 
            SimOutput("Scheduler::PeriodicCheck(): Deactivated machine " + to_string(machine_id), 2);
        }
    }
}

void Scheduler::MigrationComplete(Time_t time, VMId_t vm_id) {
    // Update your data structure. The VM now can receive new tasks lol
}
void Scheduler::Shutdown(Time_t time) {
    // Do your final reporting and bookkeeping here.
    // Report about the total energy consumed
    // Report about the SLA compliance
    // Shutdown everything to be tidy :-)
    for(auto & vm: vms) {
        VM_Shutdown(vm);
    }
    SimOutput("SimulationComplete(): Finished!", 4);
    SimOutput("SimulationComplete(): Time is " + to_string(time), 4);
}

void Scheduler::TaskComplete(Time_t now, TaskId_t task_id) {
    // Do any bookkeeping necessary for the data structures
    // Decide if a machine is to be turned off, slowed down, or VMs to be migrated according to your policy
    // This is an opportunity to make any adjustments to optimize performance/energy
    SimOutput("Scheduler::TaskComplete(): Task " + to_string(task_id) + " is complete at " + to_string(now), 4);
}

// Public interface below

static Scheduler Scheduler;

void InitScheduler() {
    SimOutput("InitScheduler(): Initializing scheduler", 4);
    Scheduler.Init();
}

void HandleNewTask(Time_t time, TaskId_t task_id) {
    SimOutput("HandleNewTask(): Received new task " + to_string(task_id) + " at time " + to_string(time), 4);
    Scheduler.NewTask(time, task_id);
}

void HandleTaskCompletion(Time_t time, TaskId_t task_id) {
    SimOutput("HandleTaskCompletion(): Task " + to_string(task_id) + " completed at time " + to_string(time), 4);
    Scheduler.TaskComplete(time, task_id);
}

void MemoryWarning(Time_t time, MachineId_t machine_id) {
    // The simulator is alerting you that machine identified by machine_id is overcommitted
    SimOutput("MemoryWarning(): Overflow at " + to_string(machine_id) + " was detected at time " + to_string(time), 0);
}

void MigrationDone(Time_t time, VMId_t vm_id) {
    // The function is called on to alert you that migration is complete
    SimOutput("MigrationDone(): Migration of VM " + to_string(vm_id) + " was completed at time " + to_string(time), 4);
    Scheduler.MigrationComplete(time, vm_id);
}

void SchedulerCheck(Time_t time) {
    // This function is called periodically by the simulator, no specific event
    SimOutput("SchedulerCheck(): SchedulerCheck() called at " + to_string(time), 4);
    Scheduler.PeriodicCheck(time);
}

void SimulationComplete(Time_t time) {
    // This function is called before the simulation terminates Add whatever you feel like.
    cout << "SLA violation report" << endl;
    cout << "SLA0: " << GetSLAReport(SLA0) << "%" << endl;
    cout << "SLA1: " << GetSLAReport(SLA1) << "%" << endl;
    cout << "SLA2: " << GetSLAReport(SLA2) << "%" << endl;     // SLA3 do not have SLA violation issues
    cout << "Total Energy " << Machine_GetClusterEnergy() << "KW-Hour" << endl;
    cout << "Simulation run finished in " << double(time)/1000000 << " seconds" << endl;
    SimOutput("SimulationComplete(): Simulation finished at time " + to_string(time), 4);
    
    Scheduler.Shutdown(time);
}

void SLAWarning(Time_t time, TaskId_t task_id) {
    
}

void StateChangeComplete(Time_t time, MachineId_t machine_id) {
    // Called in response to an earlier request to change the state of a machine
    SimOutput("StateChangeComplete(): State change for machine " + to_string(machine_id) + " completed at time " + to_string(time), 2);
}